// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  username      String   @unique
  displayName   String
  email         String   @unique
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  walletAddress String   @unique
  orders        Order[]
  ownedNFTs     NFT[]
}

model NFT {
  id          String   @id @default(cuid())
  name        String
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  imageUrl    String?
  metadataUrl String?
  minted      Boolean  @default(false)
  orders      Order[]
  ownerId     String?
  owner       User?    @relation(fields: [ownerId], references: [id])
}

enum OrderStatus {
  pending
  completed
  cancelled
}

model Order {
  id              String        @id @default(cuid())
  nftId           String
  nft             NFT           @relation(fields: [nftId], references: [id])
  buyerId         String
  buyer           User          @relation(fields: [buyerId], references: [id])
  price           Int
  status          OrderStatus   @default(pending)
  transactionHash String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  transaction     Transaction[]
}

model Transaction {
  id                    String   @id @default(cuid())
  orderId               String
  order                 Order    @relation(fields: [orderId], references: [id])
  fromAddress           String
  toAddress             String
  amount                Int
  transactionHash       String
  transactionSuccessful Boolean
  createdAt             DateTime @default(now())
}
